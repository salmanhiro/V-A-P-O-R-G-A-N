# -*- coding: utf-8 -*-
"""ï¼¶ï¼¡ï¼°ï¼¯ï¼²ã€€ï¼§ï¼¡ï¼®     ( ãƒ™ ãƒ¼ ãƒ‘      G A N )

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ach_807jC4JOzw0LhrM-bXuaTthh71BS

# ï¼¶ï¼¡ï¼°ï¼¯ï¼²ã€€ï¼§ï¼¡ï¼®     ( ãƒ™ ãƒ¼ ãƒ‘      G A N )

Vaporwave generator using Neural Style Transfer (NST), a     V A P O R W A V E    implementation of [Tensorflow NST](https://www.tensorflow.org/tutorials/generative/style_transfer).

We will use the style from [pinterest](https://id.pinterest.com/pin/92746073563558907/), which is actually from reddit. 





> And now, using this template, we will apply pretrained model.

# ï¼¬ï¼¯ï¼¡ï¼¤ï¼©ï¼®ï¼§ã€€ï¼©ï¼­ï¼¡ï¼§ï¼¥
"""

import tensorflow as tf
import tensorflow_hub as hub
import IPython.display as display

import matplotlib.pyplot as plt
import matplotlib as mp


import numpy as np
import PIL.Image
import time
import functools


mp.rcParams['figure.figsize'] = (15,15)
mp.rcParams['axes.grid'] = False
plt.rcParams['axes.grid'] = False

def tensor_convert(tensor):
  tensor = np.array(tensor*255, dtype=np.uint8)
  image = PIL.Image.fromarray(tensor[0])
  return image

def load_img(path):
  img = tf.io.read_file(path)
  img = tf.image.decode_image(img, channels=3)
  img = tf.image.convert_image_dtype(img, tf.float32)
  shape = tf.cast(tf.shape(img)[:-1], tf.float32)
  long_dim = max(shape)
  new_shape = tf.cast(shape, tf.int32)
  img = tf.image.resize(img, new_shape)
  img = img[tf.newaxis, :]
  return img

def imshow(image, title=None):
  image = tf.squeeze(image, axis=0)
  plt.imshow(image)
  plt.title(title)

def transfer():
  hub_module = hub.load('https://tfhub.dev/google/magenta/arbitrary-image-stylization-v1-256/1')
  stylized_image = hub_module(tf.constant(content_image), tf.constant(style_image))[0]
  
  return stylized_image

#@title ðŸ„»ðŸ„¾ðŸ„°ðŸ„³ ðŸ„²ðŸ„¾ðŸ„½ðŸ…ƒðŸ„´ðŸ„½ðŸ…ƒ ðŸ„¸ðŸ„¼ðŸ„°ðŸ„¶ðŸ„´

content_image_url = 'https://upload.wikimedia.org/wikipedia/commons/5/59/Commodore_Educator_64_%28standout_version%29.jpg' #@param {type:"string"}
content_path =  tf.keras.utils.get_file('ctn.jpg',content_image_url)

#Style image on pinterest, https://id.pinterest.com/pin/460563499391740215/
style_url = 'https://i.pinimg.com/564x/1a/a5/4d/1aa54d24fc2a8c102ac9f6143836c5fb.jpg'
style_path =  tf.keras.utils.get_file('stl.jpg',style_url)

print(content_image_url)
print(style_url)
output_title = 'V A P O R'

content_image = load_img(content_path)
style_image = load_img(style_path)

plt.subplot(1, 2, 1)
imshow(content_image, 'Content Image')

plt.subplot(1, 2, 2)
imshow(style_image, 'Style Image')

start = time.time()
result = tensor_convert(transfer())
result.save('painting.jpg')
#tensor_convert(transfer())
end = time.time()
print("Total time: {:.1f}".format(end-start), " s")

"""# ï¼³ï¼¨ï¼¯ï¼·"""

result

"""# ï¼²ï¼¥ï¼¦ï¼¥ï¼²ï¼¥ï¼®ï¼£ï¼¥ï¼³

[Neural style transfer](https://www.tensorflow.org/tutorials/generative/style_transfer)

[magenta/arbitrary-image-stylization-v1-256](https://tfhub.dev/google/lite-model/magenta/arbitrary-image-stylization-v1-256/fp16/prediction/1)

Gatys, Leon A., Alexander S. Ecker, and Matthias Bethge. "A neural algorithm of artistic style." arXiv preprint arXiv:1508.06576 (2015).

Style image: https://id.pinterest.com/pin/92746073563558907/
"""

